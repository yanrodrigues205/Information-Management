{"version":3,"file":"react-imask.js","sources":["../src/mixin.ts","../src/input.ts","../src/hook.ts"],"sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport IMask from 'imask';\n\n\nexport\ntype Falsy = false | 0 | \"\" | null | undefined;\n\n// TODO should be imported from core\nexport\ntype ReactElement = IMask.MaskElement | HTMLTextAreaElement | HTMLInputElement;\n\nexport\ntype ReactElementProps<MaskElement extends ReactElement=ReactElement> = React.HTMLProps<MaskElement>;\n\nexport\ntype ReactMaskProps<\n  Opts extends IMask.AnyMaskedOptions = IMask.AnyMaskedOptions,\n  Unmask extends ('typed' | boolean) = false,\n  Value = Unmask extends 'typed' ? IMask.InputMask<Opts>['typedValue'] :\n    Unmask extends Falsy ? IMask.InputMask<Opts>['value'] :\n    IMask.InputMask<Opts>['unmaskedValue'],\n  MaskElement extends ReactElement=ReactElement,\n> = {\n  onAccept?: (value: Value, maskRef: IMask.InputMask<Opts>, e?: InputEvent) => void;\n  onComplete?: (value: Value, maskRef: IMask.InputMask<Opts>, e?: InputEvent) => void;\n  unmask?: Unmask;\n  value?: Value;\n  inputRef?: React.Ref<MaskElement>;\n  ref?: React.Ref<React.ComponentType<IMaskInputProps<Opts, Unmask, Value, MaskElement>>>;\n}\n\nexport\ntype ReactMixinComponent<\n  MaskElement extends ReactElement=ReactElement,\n  MaskElementProps=ReactElementProps<MaskElement>\n> = React.ComponentType<MaskElementProps & { inputRef: React.Ref<MaskElement>; }>;\n\nconst MASK_PROPS: { [key in keyof (IMask.AllMaskedOptions & ReactMaskProps)]: unknown } = {\n  // common\n  mask: PropTypes.oneOfType([\n    PropTypes.array,\n    PropTypes.func,\n    PropTypes.string,\n    PropTypes.instanceOf(RegExp),\n    PropTypes.oneOf([Date, Number, IMask.Masked]),\n    PropTypes.instanceOf(IMask.Masked),\n  ]),\n  value: PropTypes.any,\n  unmask: PropTypes.oneOfType([\n    PropTypes.bool,\n    PropTypes.oneOf(['typed']),\n  ]),\n  prepare: PropTypes.func,\n  validate: PropTypes.func,\n  commit: PropTypes.func,\n  overwrite: PropTypes.oneOfType([\n    PropTypes.bool,\n    PropTypes.oneOf(['shift']),\n  ]),\n  eager: PropTypes.bool,\n\n  // events\n  onAccept: PropTypes.func,\n  onComplete: PropTypes.func,\n\n  // pattern\n  placeholderChar: PropTypes.string,\n  lazy: PropTypes.bool,\n  definitions: PropTypes.object,\n  blocks: PropTypes.object,\n\n  // date\n  pattern: PropTypes.string,\n  format: PropTypes.func,\n  parse: PropTypes.func,\n  autofix: PropTypes.oneOfType([\n    PropTypes.bool,\n    PropTypes.oneOf(['pad']),\n  ]),\n\n  // number\n  radix: PropTypes.string,\n  thousandsSeparator: PropTypes.string,\n  mapToRadix: PropTypes.arrayOf(PropTypes.string),\n  scale: PropTypes.number,\n  signed: PropTypes.bool,\n  normalizeZeros: PropTypes.bool,\n  padFractionalZeros: PropTypes.bool,\n  min: PropTypes.oneOfType([\n    PropTypes.number,\n    PropTypes.instanceOf(Date),\n  ]),\n  max: PropTypes.oneOfType([\n    PropTypes.number,\n    PropTypes.instanceOf(Date),\n  ]),\n\n  // dynamic\n  dispatch: PropTypes.func,\n\n  // ref\n  inputRef: PropTypes.oneOfType([\n    PropTypes.func,\n    PropTypes.shape({ current: PropTypes.object }),\n  ]),\n};\n\nconst MASK_PROPS_NAMES = Object.keys(MASK_PROPS);\nconst NON_MASK_OPTIONS_PROPS_NAMES = ['value', 'unmask', 'onAccept', 'onComplete', 'inputRef'];\nconst MASK_OPTIONS_PROPS_NAMES = MASK_PROPS_NAMES.filter(pName =>\n  NON_MASK_OPTIONS_PROPS_NAMES.indexOf(pName) < 0\n);\n\nexport type IMaskMixinProps<\n  Opts extends IMask.AnyMaskedOptions = IMask.AnyMaskedOptions,\n  Unmask extends ('typed' | boolean) = false,\n  Value = Unmask extends 'typed' ? IMask.InputMask<Opts>['typedValue'] :\n    Unmask extends Falsy ? IMask.InputMask<Opts>['value'] :\n    IMask.InputMask<Opts>['unmaskedValue'],\n  MaskElement extends ReactElement=ReactElement\n> = Opts & ReactMaskProps<Opts, Unmask, Value, MaskElement>;\n\nexport type IMaskInputProps<\n  Opts extends IMask.AnyMaskedOptions = IMask.AnyMaskedOptions,\n  Unmask extends ('typed' | boolean) = false,\n  Value = Unmask extends 'typed' ? IMask.InputMask<Opts>['typedValue'] :\n    Unmask extends Falsy ? IMask.InputMask<Opts>['value'] :\n    IMask.InputMask<Opts>['unmaskedValue'],\n  MaskElement extends ReactElement=ReactElement,\n  MaskElementProps=ReactElementProps<MaskElement>,\n> = MaskElementProps & IMaskMixinProps<Opts, Unmask, Value, MaskElement>;\n\n\n// TODO\n// 1. seems like it's wrong to have Opts as only mask options. Other component/input props should also be there. Where is \"unmask\" prop for instance?\n// 2. Unmask should be infered from Opts (see https://github.com/uNmAnNeR/imaskjs/issues/554#issuecomment-1114014010)\nexport default function IMaskMixin<\n  Opts extends IMask.AnyMaskedOptions = IMask.AnyMaskedOptions,\n  Unmask extends ('typed' | boolean) = false,\n  Value = Unmask extends 'typed' ? IMask.InputMask<Opts>['typedValue'] :\n    Unmask extends Falsy ? IMask.InputMask<Opts>['value'] :\n    IMask.InputMask<Opts>['unmaskedValue'],\n  MaskElement extends ReactElement=ReactElement,\n  MaskElementProps=ReactElementProps<MaskElement>,\n>(ComposedComponent: ReactMixinComponent<MaskElement, MaskElementProps>) {\n  const MaskedComponent = class extends React.Component<IMaskInputProps<Opts, Unmask, Value, MaskElement, MaskElementProps>> {\n    static displayName: string;\n    static propTypes: typeof MASK_PROPS;\n\n    element: MaskElement;\n    maskRef: IMask.InputMask<Opts>;\n\n    constructor (props: IMaskInputProps<Opts, Unmask, Value, MaskElement, MaskElementProps>) {\n      super(props);\n      this._inputRef = this._inputRef.bind(this);\n    }\n\n    componentDidMount () {\n      if (!this.props.mask) return;\n\n      this.initMask();\n    }\n\n    componentDidUpdate () {\n      const props = this.props;\n      const maskOptions = this._extractMaskOptionsFromProps(props);\n      if (maskOptions.mask) {\n        if (this.maskRef) {\n          this.maskRef.updateOptions(maskOptions);\n          if ('value' in props) this.maskValue = props.value;\n        } else {\n          this.initMask(maskOptions);\n        }\n      } else {\n        this.destroyMask();\n        if ('value' in props) this.element.value = props.value as unknown as IMask.InputMask<Opts>['value'];\n      }\n    }\n\n    componentWillUnmount () {\n      this.destroyMask();\n    }\n\n    _inputRef (el: MaskElement) {\n      this.element = el;\n      if (this.props.inputRef) {\n        if (Object.prototype.hasOwnProperty.call(this.props.inputRef, 'current'))\n          (this.props.inputRef as React.MutableRefObject<MaskElement>).current = el;\n        else\n          (this.props.inputRef as React.RefCallback<MaskElement>)(el);\n      }\n    }\n\n    initMask (maskOptions: Opts = this._extractMaskOptionsFromProps(this.props)) {\n      this.maskRef = IMask(this.element, maskOptions)\n        .on('accept', this._onAccept.bind(this))\n        .on('complete', this._onComplete.bind(this));\n\n      if ('value' in this.props) this.maskValue = this.props.value;\n    }\n\n    destroyMask () {\n      if (this.maskRef) {\n        this.maskRef.destroy();\n        delete this.maskRef;\n      }\n    }\n\n    _extractMaskOptionsFromProps (props: IMaskMixinProps<Opts, Unmask, Value, MaskElement>): Opts {\n      const { ...cloneProps } = props;\n\n      // keep only mask options props\n      (Object.keys(cloneProps) as Array<keyof IMaskMixinProps<Opts, Unmask, Value, MaskElement>>)\n        // TODO why need cast to string?\n        .filter(prop => MASK_OPTIONS_PROPS_NAMES.indexOf(prop as string) < 0)\n        .forEach(nonMaskProp => {\n          delete cloneProps[nonMaskProp];\n        });\n\n      return cloneProps as unknown as Opts;\n    }\n\n    _extractNonMaskProps (props: IMaskMixinProps<Opts, Unmask, Value, MaskElement>): IMaskInputProps<Opts, Unmask, Value, MaskElement, MaskElementProps> {\n      const { ...cloneProps } = props;\n\n      (MASK_PROPS_NAMES as Array<keyof IMaskMixinProps<Opts, Unmask, Value, MaskElement>>).forEach(maskProp => {\n        delete cloneProps[maskProp];\n      });\n\n      return cloneProps as IMaskInputProps<Opts, Unmask, Value, MaskElement, MaskElementProps>;\n    }\n\n    get maskValue (): Value {\n      if (this.props.unmask === 'typed') return this.maskRef.typedValue as unknown as Value;\n      if (this.props.unmask) return this.maskRef.unmaskedValue as unknown as Value;\n      return this.maskRef.value as unknown as Value;\n    }\n\n    set maskValue (value: Value) {\n      value = (value == null ? '' : value) as Value;\n      if (this.props.unmask === 'typed') this.maskRef.typedValue = value as unknown as IMask.MaskedTypedValue<Opts['mask']>;\n      else if (this.props.unmask) this.maskRef.unmaskedValue = value as unknown as IMask.InputMask<Opts>['unmaskedValue'];\n      else this.maskRef.value = value as unknown as IMask.InputMask<Opts>['value'];\n    }\n\n    _onAccept (e?: InputEvent) {\n      if (this.props.onAccept && this.maskRef) this.props.onAccept(this.maskValue, this.maskRef, e);\n    }\n\n    _onComplete (e?: InputEvent) {\n      if (this.props.onComplete && this.maskRef) this.props.onComplete(this.maskValue, this.maskRef, e);\n    }\n\n    render () {\n      return React.createElement(ComposedComponent, {\n        ...this._extractNonMaskProps(this.props),\n        inputRef: this._inputRef,\n      });\n    }\n  };\n\n  const nestedComponentName = ComposedComponent.displayName || ComposedComponent.name || 'Component';\n  MaskedComponent.displayName = `IMask(${nestedComponentName})`;\n  MaskedComponent.propTypes = MASK_PROPS;\n\n  return MaskedComponent as React.ComponentType<IMaskInputProps<Opts, Unmask, Value, MaskElement, MaskElementProps>>;\n}\n","import React from 'react';\nimport IMask from 'imask';\nimport IMaskMixin, { IMaskInputProps, Falsy, ReactElement, ReactElementProps } from './mixin';\n\n\nconst IMaskInputClass = IMaskMixin(({ inputRef, ...props }) =>\n  React.createElement('input', {\n    ...props,\n    ref: inputRef,\n  })\n);\n\nconst IMaskInputFn = <\n  Opts extends IMask.AnyMaskedOptions = IMask.AnyMaskedOptions,\n  Unmask extends ('typed' | boolean) = false,\n  Value = Unmask extends 'typed' ? IMask.InputMask<Opts>['typedValue'] :\n    Unmask extends Falsy ? IMask.InputMask<Opts>['value'] :\n    IMask.InputMask<Opts>['unmaskedValue'],\n  MaskElement extends ReactElement=ReactElement,\n  MaskElementProps=ReactElementProps<MaskElement>,\n>(\n  props: IMaskInputProps<Opts, Unmask, Value, MaskElement, MaskElementProps>,\n  ref: React.Ref<React.ComponentType<IMaskInputProps<Opts, Unmask, Value, MaskElement, MaskElementProps>>>\n) =>\n  React.createElement(IMaskInputClass as React.ComponentType<IMaskInputProps<Opts, Unmask, Value, MaskElement, MaskElementProps>>, { ...props, ref })\n;\n\nconst IMaskInput = React.forwardRef(IMaskInputFn as <\n  Opts extends IMask.AnyMaskedOptions = IMask.AnyMaskedOptions,\n  Unmask extends ('typed' | boolean) = false,\n  Value = Unmask extends 'typed' ? IMask.InputMask<Opts>['typedValue'] :\n    Unmask extends Falsy ? IMask.InputMask<Opts>['value'] :\n    IMask.InputMask<Opts>['unmaskedValue'],\n  MaskElement extends ReactElement=ReactElement,\n  MaskElementProps=ReactElementProps<MaskElement>,\n>(\n  props: IMaskInputProps<Opts, Unmask, Value, MaskElement, MaskElementProps> & { ref?: React.Ref<React.ComponentType<IMaskInputProps<Opts, Unmask, Value, MaskElement, MaskElementProps>>> }\n) => React.ReactElement<IMaskInputProps<Opts, Unmask, Value, MaskElement, MaskElementProps>>);\n\n\nexport default IMaskInput;\n","import IMask from 'imask';\nimport { useEffect, useCallback, useState, useRef, Dispatch } from 'react';\nimport type { RefObject } from 'react';\nimport type { ReactMaskProps, ReactElement } from './mixin';\n\n\nexport default\nfunction useIMask<\n  Opts extends IMask.AnyMaskedOptions = IMask.AnyMaskedOptions,\n  MaskElement extends ReactElement=HTMLInputElement,\n>(\n  opts: Opts,\n  { onAccept, onComplete }: Pick<ReactMaskProps<Opts, true, IMask.InputMask<Opts>['value'], MaskElement>, 'onAccept' | 'onComplete'> = {}\n): {\n  ref: RefObject<MaskElement>,\n  maskRef: RefObject<IMask.InputMask<Opts>>,\n  value: IMask.InputMask<Opts>['value'],\n  setValue: Dispatch<IMask.InputMask<Opts>['value']>,\n  unmaskedValue: IMask.InputMask<Opts>['unmaskedValue'],\n  setUnmaskedValue: Dispatch<IMask.InputMask<Opts>['unmaskedValue']>,\n  typedValue: IMask.InputMask<Opts>['typedValue'],\n  setTypedValue: Dispatch<IMask.InputMask<Opts>['typedValue']>,\n} {\n  const ref = useRef<MaskElement>(null);\n  const maskRef = useRef<IMask.InputMask<Opts>>(null);\n  const [initialized, setInitialized] = useState<boolean>(false);\n  const [value, setValue] = useState<IMask.InputMask<Opts>['value']>('');\n  const [unmaskedValue, setUnmaskedValue] = useState<IMask.InputMask<Opts>['unmaskedValue']>('');\n  const [typedValue, setTypedValue] = useState<IMask.InputMask<Opts>['typedValue']>();\n\n  const _destroyMask = useCallback(() => {\n    maskRef.current?.destroy();\n    maskRef.current = null;\n  }, []);\n\n  const _onAccept = useCallback(\n    (event?: InputEvent) => {\n      if (!maskRef.current) return;\n\n      setTypedValue(maskRef.current.typedValue);\n      setUnmaskedValue(maskRef.current.unmaskedValue);\n      setValue(maskRef.current.value);\n      onAccept?.(maskRef.current.value, maskRef.current, event);\n    },\n    [onAccept],\n  );\n\n  const _onComplete = useCallback(\n    () => maskRef.current && onComplete?.(maskRef.current.value, maskRef.current),\n    [onComplete],\n  );\n\n  useEffect(() => {\n    const el = ref.current;\n\n    if (!el || !opts?.mask) return _destroyMask();\n\n    const mask = maskRef.current;\n\n    if (!mask) {\n      if (el && opts?.mask) {\n        maskRef.current = IMask(el, opts);\n        _onAccept();\n      }\n    } else {\n      mask?.updateOptions(opts);\n    }\n    setInitialized(Boolean(mask));\n  }, [opts, _destroyMask, _onAccept]);\n\n  useEffect(() => {\n    if (!maskRef.current) return;\n\n    const mask = maskRef.current;\n\n    mask.on('accept', _onAccept);\n    mask.on('complete', _onComplete);\n\n    return () => {\n      mask.off('accept', _onAccept);\n      mask.off('complete', _onComplete);\n    };\n  }, [_onAccept, _onComplete]);\n\n  useEffect(() => {\n    const mask = maskRef.current;\n    if (mask && initialized) mask.value = value;\n  }, [value]);\n\n  useEffect(() => {\n    const mask = maskRef.current;\n    if (mask && initialized) mask.unmaskedValue = unmaskedValue;\n  }, [unmaskedValue]);\n\n  useEffect(() => {\n    const mask = maskRef.current;\n    if (mask && initialized) mask.typedValue = typedValue;\n  }, [typedValue]);\n\n  useEffect(() => _destroyMask, [_destroyMask]);\n\n  return {\n    ref,\n    maskRef,\n    value, setValue,\n    unmaskedValue, setUnmaskedValue,\n    typedValue, setTypedValue,\n  };\n}\n"],"names":["MASK_PROPS","mask","PropTypes","oneOfType","array","func","string","instanceOf","RegExp","oneOf","Date","Number","IMask","Masked","value","any","unmask","bool","prepare","validate","commit","overwrite","eager","onAccept","onComplete","placeholderChar","lazy","definitions","object","blocks","pattern","format","parse","autofix","radix","thousandsSeparator","mapToRadix","arrayOf","scale","number","signed","normalizeZeros","padFractionalZeros","min","max","dispatch","inputRef","shape","current","MASK_PROPS_NAMES","Object","keys","NON_MASK_OPTIONS_PROPS_NAMES","MASK_OPTIONS_PROPS_NAMES","filter","pName","indexOf","IMaskMixin","ComposedComponent","MaskedComponent","props","_inputRef","bind","initMask","maskOptions","_extractMaskOptionsFromProps","maskRef","updateOptions","maskValue","destroyMask","element","el","prototype","hasOwnProperty","call","on","_onAccept","_onComplete","destroy","cloneProps","prop","forEach","nonMaskProp","maskProp","typedValue","unmaskedValue","e","React","createElement","_extractNonMaskProps","Component","nestedComponentName","displayName","name","propTypes","IMaskInputClass","ref","IMaskInputFn","IMaskInput","forwardRef","useIMask","opts","useRef","useState","initialized","setInitialized","setValue","setUnmaskedValue","setTypedValue","_destroyMask","useCallback","event","useEffect","Boolean","off"],"mappings":"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"}