{"ast":null,"code":"import { j as _toConsumableArray, d as _inherits, e as _createSuper, _ as _createClass, a as _classCallCheck, g as _get, h as _getPrototypeOf, f as _slicedToArray, i as _set } from '../_rollupPluginBabelHelpers-67bba7fb.js';\nimport { escapeRegExp, normalizePrepare, DIRECTION } from '../core/utils.js';\nimport ChangeDetails from '../core/change-details.js';\nimport Masked from './base.js';\nimport IMask from '../core/holder.js';\nimport '../core/continuous-tail-details.js';\n\n/**\n  Number mask\n  @param {Object} opts\n  @param {string} opts.radix - Single char\n  @param {string} opts.thousandsSeparator - Single char\n  @param {Array<string>} opts.mapToRadix - Array of single chars\n  @param {number} opts.min\n  @param {number} opts.max\n  @param {number} opts.scale - Digits after point\n  @param {boolean} opts.signed - Allow negative\n  @param {boolean} opts.normalizeZeros - Flag to remove leading and trailing zeros in the end of editing\n  @param {boolean} opts.padFractionalZeros - Flag to pad trailing zeros after point in the end of editing\n*/\nvar MaskedNumber = /*#__PURE__*/function (_Masked) {\n  _inherits(MaskedNumber, _Masked);\n  var _super = _createSuper(MaskedNumber);\n\n  /** Single char */\n\n  /** Single char */\n\n  /** Array of single chars */\n\n  /** */\n\n  /** */\n\n  /** Digits after point */\n\n  /** */\n\n  /** Flag to remove leading and trailing zeros in the end of editing */\n\n  /** Flag to pad trailing zeros after point in the end of editing */\n  function MaskedNumber(opts) {\n    _classCallCheck(this, MaskedNumber);\n    return _super.call(this, Object.assign({}, MaskedNumber.DEFAULTS, opts));\n  }\n  /**\n    @override\n  */\n\n  _createClass(MaskedNumber, [{\n    key: \"_update\",\n    value: function _update(opts) {\n      _get(_getPrototypeOf(MaskedNumber.prototype), \"_update\", this).call(this, opts);\n      this._updateRegExps();\n    }\n    /** */\n  }, {\n    key: \"_updateRegExps\",\n    value: function _updateRegExps() {\n      // use different regexp to process user input (more strict, input suffix) and tail shifting\n      var start = '^' + (this.allowNegative ? '[+|\\\\-]?' : '');\n      var midInput = '(0|([1-9]+\\\\d*))?';\n      var mid = '\\\\d*';\n      var end = (this.scale ? '(' + escapeRegExp(this.radix) + '\\\\d{0,' + this.scale + '})?' : '') + '$';\n      this._numberRegExpInput = new RegExp(start + midInput + end);\n      this._numberRegExp = new RegExp(start + mid + end);\n      this._mapToRadixRegExp = new RegExp('[' + this.mapToRadix.map(escapeRegExp).join('') + ']', 'g');\n      this._thousandsSeparatorRegExp = new RegExp(escapeRegExp(this.thousandsSeparator), 'g');\n    }\n    /** */\n  }, {\n    key: \"_removeThousandsSeparators\",\n    value: function _removeThousandsSeparators(value) {\n      return value.replace(this._thousandsSeparatorRegExp, '');\n    }\n    /** */\n  }, {\n    key: \"_insertThousandsSeparators\",\n    value: function _insertThousandsSeparators(value) {\n      // https://stackoverflow.com/questions/2901102/how-to-print-a-number-with-commas-as-thousands-separators-in-javascript\n      var parts = value.split(this.radix);\n      parts[0] = parts[0].replace(/\\B(?=(\\d{3})+(?!\\d))/g, this.thousandsSeparator);\n      return parts.join(this.radix);\n    }\n    /**\n      @override\n    */\n  }, {\n    key: \"doPrepare\",\n    value: function doPrepare(ch) {\n      var _get2;\n      ch = ch.replace(this._mapToRadixRegExp, this.radix);\n      var noSepCh = this._removeThousandsSeparators(ch);\n      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        args[_key - 1] = arguments[_key];\n      }\n      var _normalizePrepare = normalizePrepare((_get2 = _get(_getPrototypeOf(MaskedNumber.prototype), \"doPrepare\", this)).call.apply(_get2, [this, noSepCh].concat(args))),\n        _normalizePrepare2 = _slicedToArray(_normalizePrepare, 2),\n        prepCh = _normalizePrepare2[0],\n        details = _normalizePrepare2[1];\n      if (ch && !noSepCh) details.skip = true;\n      return [prepCh, details];\n    }\n    /** */\n  }, {\n    key: \"_separatorsCount\",\n    value: function _separatorsCount(to) {\n      var extendOnSeparators = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      var count = 0;\n      for (var pos = 0; pos < to; ++pos) {\n        if (this._value.indexOf(this.thousandsSeparator, pos) === pos) {\n          ++count;\n          if (extendOnSeparators) to += this.thousandsSeparator.length;\n        }\n      }\n      return count;\n    }\n    /** */\n  }, {\n    key: \"_separatorsCountFromSlice\",\n    value: function _separatorsCountFromSlice() {\n      var slice = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this._value;\n      return this._separatorsCount(this._removeThousandsSeparators(slice).length, true);\n    }\n    /**\n      @override\n    */\n  }, {\n    key: \"extractInput\",\n    value: function extractInput() {\n      var fromPos = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n      var toPos = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.value.length;\n      var flags = arguments.length > 2 ? arguments[2] : undefined;\n      var _this$_adjustRangeWit = this._adjustRangeWithSeparators(fromPos, toPos);\n      var _this$_adjustRangeWit2 = _slicedToArray(_this$_adjustRangeWit, 2);\n      fromPos = _this$_adjustRangeWit2[0];\n      toPos = _this$_adjustRangeWit2[1];\n      return this._removeThousandsSeparators(_get(_getPrototypeOf(MaskedNumber.prototype), \"extractInput\", this).call(this, fromPos, toPos, flags));\n    }\n    /**\n      @override\n    */\n  }, {\n    key: \"_appendCharRaw\",\n    value: function _appendCharRaw(ch) {\n      var flags = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      if (!this.thousandsSeparator) return _get(_getPrototypeOf(MaskedNumber.prototype), \"_appendCharRaw\", this).call(this, ch, flags);\n      var prevBeforeTailValue = flags.tail && flags._beforeTailState ? flags._beforeTailState._value : this._value;\n      var prevBeforeTailSeparatorsCount = this._separatorsCountFromSlice(prevBeforeTailValue);\n      this._value = this._removeThousandsSeparators(this.value);\n      var appendDetails = _get(_getPrototypeOf(MaskedNumber.prototype), \"_appendCharRaw\", this).call(this, ch, flags);\n      this._value = this._insertThousandsSeparators(this._value);\n      var beforeTailValue = flags.tail && flags._beforeTailState ? flags._beforeTailState._value : this._value;\n      var beforeTailSeparatorsCount = this._separatorsCountFromSlice(beforeTailValue);\n      appendDetails.tailShift += (beforeTailSeparatorsCount - prevBeforeTailSeparatorsCount) * this.thousandsSeparator.length;\n      appendDetails.skip = !appendDetails.rawInserted && ch === this.thousandsSeparator;\n      return appendDetails;\n    }\n    /** */\n  }, {\n    key: \"_findSeparatorAround\",\n    value: function _findSeparatorAround(pos) {\n      if (this.thousandsSeparator) {\n        var searchFrom = pos - this.thousandsSeparator.length + 1;\n        var separatorPos = this.value.indexOf(this.thousandsSeparator, searchFrom);\n        if (separatorPos <= pos) return separatorPos;\n      }\n      return -1;\n    }\n  }, {\n    key: \"_adjustRangeWithSeparators\",\n    value: function _adjustRangeWithSeparators(from, to) {\n      var separatorAroundFromPos = this._findSeparatorAround(from);\n      if (separatorAroundFromPos >= 0) from = separatorAroundFromPos;\n      var separatorAroundToPos = this._findSeparatorAround(to);\n      if (separatorAroundToPos >= 0) to = separatorAroundToPos + this.thousandsSeparator.length;\n      return [from, to];\n    }\n    /**\n      @override\n    */\n  }, {\n    key: \"remove\",\n    value: function remove() {\n      var fromPos = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n      var toPos = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.value.length;\n      var _this$_adjustRangeWit3 = this._adjustRangeWithSeparators(fromPos, toPos);\n      var _this$_adjustRangeWit4 = _slicedToArray(_this$_adjustRangeWit3, 2);\n      fromPos = _this$_adjustRangeWit4[0];\n      toPos = _this$_adjustRangeWit4[1];\n      var valueBeforePos = this.value.slice(0, fromPos);\n      var valueAfterPos = this.value.slice(toPos);\n      var prevBeforeTailSeparatorsCount = this._separatorsCount(valueBeforePos.length);\n      this._value = this._insertThousandsSeparators(this._removeThousandsSeparators(valueBeforePos + valueAfterPos));\n      var beforeTailSeparatorsCount = this._separatorsCountFromSlice(valueBeforePos);\n      return new ChangeDetails({\n        tailShift: (beforeTailSeparatorsCount - prevBeforeTailSeparatorsCount) * this.thousandsSeparator.length\n      });\n    }\n    /**\n      @override\n    */\n  }, {\n    key: \"nearestInputPos\",\n    value: function nearestInputPos(cursorPos, direction) {\n      if (!this.thousandsSeparator) return cursorPos;\n      switch (direction) {\n        case DIRECTION.NONE:\n        case DIRECTION.LEFT:\n        case DIRECTION.FORCE_LEFT:\n          {\n            var separatorAtLeftPos = this._findSeparatorAround(cursorPos - 1);\n            if (separatorAtLeftPos >= 0) {\n              var separatorAtLeftEndPos = separatorAtLeftPos + this.thousandsSeparator.length;\n              if (cursorPos < separatorAtLeftEndPos || this.value.length <= separatorAtLeftEndPos || direction === DIRECTION.FORCE_LEFT) {\n                return separatorAtLeftPos;\n              }\n            }\n            break;\n          }\n        case DIRECTION.RIGHT:\n        case DIRECTION.FORCE_RIGHT:\n          {\n            var separatorAtRightPos = this._findSeparatorAround(cursorPos);\n            if (separatorAtRightPos >= 0) {\n              return separatorAtRightPos + this.thousandsSeparator.length;\n            }\n          }\n      }\n      return cursorPos;\n    }\n    /**\n      @override\n    */\n  }, {\n    key: \"doValidate\",\n    value: function doValidate(flags) {\n      var regexp = flags.input ? this._numberRegExpInput : this._numberRegExp; // validate as string\n\n      var valid = regexp.test(this._removeThousandsSeparators(this.value));\n      if (valid) {\n        // validate as number\n        var number = this.number;\n        valid = valid && !isNaN(number) && (\n        // check min bound for negative values\n        this.min == null || this.min >= 0 || this.min <= this.number) && (\n        // check max bound for positive values\n        this.max == null || this.max <= 0 || this.number <= this.max);\n      }\n      return valid && _get(_getPrototypeOf(MaskedNumber.prototype), \"doValidate\", this).call(this, flags);\n    }\n    /**\n      @override\n    */\n  }, {\n    key: \"doCommit\",\n    value: function doCommit() {\n      if (this.value) {\n        var number = this.number;\n        var validnum = number; // check bounds\n\n        if (this.min != null) validnum = Math.max(validnum, this.min);\n        if (this.max != null) validnum = Math.min(validnum, this.max);\n        if (validnum !== number) this.unmaskedValue = String(validnum);\n        var formatted = this.value;\n        if (this.normalizeZeros) formatted = this._normalizeZeros(formatted);\n        if (this.padFractionalZeros && this.scale > 0) formatted = this._padFractionalZeros(formatted);\n        this._value = formatted;\n      }\n      _get(_getPrototypeOf(MaskedNumber.prototype), \"doCommit\", this).call(this);\n    }\n    /** */\n  }, {\n    key: \"_normalizeZeros\",\n    value: function _normalizeZeros(value) {\n      var parts = this._removeThousandsSeparators(value).split(this.radix); // remove leading zeros\n\n      parts[0] = parts[0].replace(/^(\\D*)(0*)(\\d*)/, function (match, sign, zeros, num) {\n        return sign + num;\n      }); // add leading zero\n\n      if (value.length && !/\\d$/.test(parts[0])) parts[0] = parts[0] + '0';\n      if (parts.length > 1) {\n        parts[1] = parts[1].replace(/0*$/, ''); // remove trailing zeros\n\n        if (!parts[1].length) parts.length = 1; // remove fractional\n      }\n\n      return this._insertThousandsSeparators(parts.join(this.radix));\n    }\n    /** */\n  }, {\n    key: \"_padFractionalZeros\",\n    value: function _padFractionalZeros(value) {\n      if (!value) return value;\n      var parts = value.split(this.radix);\n      if (parts.length < 2) parts.push('');\n      parts[1] = parts[1].padEnd(this.scale, '0');\n      return parts.join(this.radix);\n    }\n    /**\n      @override\n    */\n  }, {\n    key: \"unmaskedValue\",\n    get: function get() {\n      return this._removeThousandsSeparators(this._normalizeZeros(this.value)).replace(this.radix, '.');\n    },\n    set: function set(unmaskedValue) {\n      _set(_getPrototypeOf(MaskedNumber.prototype), \"unmaskedValue\", unmaskedValue.replace('.', this.radix), this, true);\n    }\n    /**\n      @override\n    */\n  }, {\n    key: \"typedValue\",\n    get: function get() {\n      return Number(this.unmaskedValue);\n    },\n    set: function set(n) {\n      _set(_getPrototypeOf(MaskedNumber.prototype), \"unmaskedValue\", String(n), this, true);\n    }\n    /** Parsed Number */\n  }, {\n    key: \"number\",\n    get: function get() {\n      return this.typedValue;\n    },\n    set: function set(number) {\n      this.typedValue = number;\n    }\n    /**\n      Is negative allowed\n      @readonly\n    */\n  }, {\n    key: \"allowNegative\",\n    get: function get() {\n      return this.signed || this.min != null && this.min < 0 || this.max != null && this.max < 0;\n    }\n    /**\n      @override\n    */\n  }, {\n    key: \"typedValueEquals\",\n    value: function typedValueEquals(value) {\n      // handle  0 -> '' case (typed = 0 even if value = '')\n      // for details see https://github.com/uNmAnNeR/imaskjs/issues/134\n      return (_get(_getPrototypeOf(MaskedNumber.prototype), \"typedValueEquals\", this).call(this, value) || MaskedNumber.EMPTY_VALUES.includes(value) && MaskedNumber.EMPTY_VALUES.includes(this.typedValue)) && !(value === 0 && this.value === '');\n    }\n  }]);\n  return MaskedNumber;\n}(Masked);\nMaskedNumber.DEFAULTS = {\n  radix: ',',\n  thousandsSeparator: '',\n  mapToRadix: ['.'],\n  scale: 2,\n  signed: false,\n  normalizeZeros: true,\n  padFractionalZeros: false\n};\nMaskedNumber.EMPTY_VALUES = [].concat(_toConsumableArray(Masked.EMPTY_VALUES), [0]);\nIMask.MaskedNumber = MaskedNumber;\nexport { MaskedNumber as default };","map":{"version":3,"names":["j","_toConsumableArray","d","_inherits","e","_createSuper","_","_createClass","a","_classCallCheck","g","_get","h","_getPrototypeOf","f","_slicedToArray","i","_set","escapeRegExp","normalizePrepare","DIRECTION","ChangeDetails","Masked","IMask","MaskedNumber","_Masked","_super","opts","call","Object","assign","DEFAULTS","key","value","_update","prototype","_updateRegExps","start","allowNegative","midInput","mid","end","scale","radix","_numberRegExpInput","RegExp","_numberRegExp","_mapToRadixRegExp","mapToRadix","map","join","_thousandsSeparatorRegExp","thousandsSeparator","_removeThousandsSeparators","replace","_insertThousandsSeparators","parts","split","doPrepare","ch","_get2","noSepCh","_len","arguments","length","args","Array","_key","_normalizePrepare","apply","concat","_normalizePrepare2","prepCh","details","skip","_separatorsCount","to","extendOnSeparators","undefined","count","pos","_value","indexOf","_separatorsCountFromSlice","slice","extractInput","fromPos","toPos","flags","_this$_adjustRangeWit","_adjustRangeWithSeparators","_this$_adjustRangeWit2","_appendCharRaw","prevBeforeTailValue","tail","_beforeTailState","prevBeforeTailSeparatorsCount","appendDetails","beforeTailValue","beforeTailSeparatorsCount","tailShift","rawInserted","_findSeparatorAround","searchFrom","separatorPos","from","separatorAroundFromPos","separatorAroundToPos","remove","_this$_adjustRangeWit3","_this$_adjustRangeWit4","valueBeforePos","valueAfterPos","nearestInputPos","cursorPos","direction","NONE","LEFT","FORCE_LEFT","separatorAtLeftPos","separatorAtLeftEndPos","RIGHT","FORCE_RIGHT","separatorAtRightPos","doValidate","regexp","input","valid","test","number","isNaN","min","max","doCommit","validnum","Math","unmaskedValue","String","formatted","normalizeZeros","_normalizeZeros","padFractionalZeros","_padFractionalZeros","match","sign","zeros","num","push","padEnd","get","set","Number","n","typedValue","signed","typedValueEquals","EMPTY_VALUES","includes","default"],"sources":["C:/Users/yan rodrigues/Documents/GitHub/Information-Management/client/node_modules/imask/esm/masked/number.js"],"sourcesContent":["import { j as _toConsumableArray, d as _inherits, e as _createSuper, _ as _createClass, a as _classCallCheck, g as _get, h as _getPrototypeOf, f as _slicedToArray, i as _set } from '../_rollupPluginBabelHelpers-67bba7fb.js';\nimport { escapeRegExp, normalizePrepare, DIRECTION } from '../core/utils.js';\nimport ChangeDetails from '../core/change-details.js';\nimport Masked from './base.js';\nimport IMask from '../core/holder.js';\nimport '../core/continuous-tail-details.js';\n\n/**\n  Number mask\n  @param {Object} opts\n  @param {string} opts.radix - Single char\n  @param {string} opts.thousandsSeparator - Single char\n  @param {Array<string>} opts.mapToRadix - Array of single chars\n  @param {number} opts.min\n  @param {number} opts.max\n  @param {number} opts.scale - Digits after point\n  @param {boolean} opts.signed - Allow negative\n  @param {boolean} opts.normalizeZeros - Flag to remove leading and trailing zeros in the end of editing\n  @param {boolean} opts.padFractionalZeros - Flag to pad trailing zeros after point in the end of editing\n*/\nvar MaskedNumber = /*#__PURE__*/function (_Masked) {\n  _inherits(MaskedNumber, _Masked);\n\n  var _super = _createSuper(MaskedNumber);\n\n  /** Single char */\n\n  /** Single char */\n\n  /** Array of single chars */\n\n  /** */\n\n  /** */\n\n  /** Digits after point */\n\n  /** */\n\n  /** Flag to remove leading and trailing zeros in the end of editing */\n\n  /** Flag to pad trailing zeros after point in the end of editing */\n  function MaskedNumber(opts) {\n    _classCallCheck(this, MaskedNumber);\n\n    return _super.call(this, Object.assign({}, MaskedNumber.DEFAULTS, opts));\n  }\n  /**\n    @override\n  */\n\n\n  _createClass(MaskedNumber, [{\n    key: \"_update\",\n    value: function _update(opts) {\n      _get(_getPrototypeOf(MaskedNumber.prototype), \"_update\", this).call(this, opts);\n\n      this._updateRegExps();\n    }\n    /** */\n\n  }, {\n    key: \"_updateRegExps\",\n    value: function _updateRegExps() {\n      // use different regexp to process user input (more strict, input suffix) and tail shifting\n      var start = '^' + (this.allowNegative ? '[+|\\\\-]?' : '');\n      var midInput = '(0|([1-9]+\\\\d*))?';\n      var mid = '\\\\d*';\n      var end = (this.scale ? '(' + escapeRegExp(this.radix) + '\\\\d{0,' + this.scale + '})?' : '') + '$';\n      this._numberRegExpInput = new RegExp(start + midInput + end);\n      this._numberRegExp = new RegExp(start + mid + end);\n      this._mapToRadixRegExp = new RegExp('[' + this.mapToRadix.map(escapeRegExp).join('') + ']', 'g');\n      this._thousandsSeparatorRegExp = new RegExp(escapeRegExp(this.thousandsSeparator), 'g');\n    }\n    /** */\n\n  }, {\n    key: \"_removeThousandsSeparators\",\n    value: function _removeThousandsSeparators(value) {\n      return value.replace(this._thousandsSeparatorRegExp, '');\n    }\n    /** */\n\n  }, {\n    key: \"_insertThousandsSeparators\",\n    value: function _insertThousandsSeparators(value) {\n      // https://stackoverflow.com/questions/2901102/how-to-print-a-number-with-commas-as-thousands-separators-in-javascript\n      var parts = value.split(this.radix);\n      parts[0] = parts[0].replace(/\\B(?=(\\d{3})+(?!\\d))/g, this.thousandsSeparator);\n      return parts.join(this.radix);\n    }\n    /**\n      @override\n    */\n\n  }, {\n    key: \"doPrepare\",\n    value: function doPrepare(ch) {\n      var _get2;\n\n      ch = ch.replace(this._mapToRadixRegExp, this.radix);\n\n      var noSepCh = this._removeThousandsSeparators(ch);\n\n      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        args[_key - 1] = arguments[_key];\n      }\n\n      var _normalizePrepare = normalizePrepare((_get2 = _get(_getPrototypeOf(MaskedNumber.prototype), \"doPrepare\", this)).call.apply(_get2, [this, noSepCh].concat(args))),\n          _normalizePrepare2 = _slicedToArray(_normalizePrepare, 2),\n          prepCh = _normalizePrepare2[0],\n          details = _normalizePrepare2[1];\n\n      if (ch && !noSepCh) details.skip = true;\n      return [prepCh, details];\n    }\n    /** */\n\n  }, {\n    key: \"_separatorsCount\",\n    value: function _separatorsCount(to) {\n      var extendOnSeparators = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      var count = 0;\n\n      for (var pos = 0; pos < to; ++pos) {\n        if (this._value.indexOf(this.thousandsSeparator, pos) === pos) {\n          ++count;\n          if (extendOnSeparators) to += this.thousandsSeparator.length;\n        }\n      }\n\n      return count;\n    }\n    /** */\n\n  }, {\n    key: \"_separatorsCountFromSlice\",\n    value: function _separatorsCountFromSlice() {\n      var slice = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this._value;\n      return this._separatorsCount(this._removeThousandsSeparators(slice).length, true);\n    }\n    /**\n      @override\n    */\n\n  }, {\n    key: \"extractInput\",\n    value: function extractInput() {\n      var fromPos = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n      var toPos = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.value.length;\n      var flags = arguments.length > 2 ? arguments[2] : undefined;\n\n      var _this$_adjustRangeWit = this._adjustRangeWithSeparators(fromPos, toPos);\n\n      var _this$_adjustRangeWit2 = _slicedToArray(_this$_adjustRangeWit, 2);\n\n      fromPos = _this$_adjustRangeWit2[0];\n      toPos = _this$_adjustRangeWit2[1];\n      return this._removeThousandsSeparators(_get(_getPrototypeOf(MaskedNumber.prototype), \"extractInput\", this).call(this, fromPos, toPos, flags));\n    }\n    /**\n      @override\n    */\n\n  }, {\n    key: \"_appendCharRaw\",\n    value: function _appendCharRaw(ch) {\n      var flags = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      if (!this.thousandsSeparator) return _get(_getPrototypeOf(MaskedNumber.prototype), \"_appendCharRaw\", this).call(this, ch, flags);\n      var prevBeforeTailValue = flags.tail && flags._beforeTailState ? flags._beforeTailState._value : this._value;\n\n      var prevBeforeTailSeparatorsCount = this._separatorsCountFromSlice(prevBeforeTailValue);\n\n      this._value = this._removeThousandsSeparators(this.value);\n\n      var appendDetails = _get(_getPrototypeOf(MaskedNumber.prototype), \"_appendCharRaw\", this).call(this, ch, flags);\n\n      this._value = this._insertThousandsSeparators(this._value);\n      var beforeTailValue = flags.tail && flags._beforeTailState ? flags._beforeTailState._value : this._value;\n\n      var beforeTailSeparatorsCount = this._separatorsCountFromSlice(beforeTailValue);\n\n      appendDetails.tailShift += (beforeTailSeparatorsCount - prevBeforeTailSeparatorsCount) * this.thousandsSeparator.length;\n      appendDetails.skip = !appendDetails.rawInserted && ch === this.thousandsSeparator;\n      return appendDetails;\n    }\n    /** */\n\n  }, {\n    key: \"_findSeparatorAround\",\n    value: function _findSeparatorAround(pos) {\n      if (this.thousandsSeparator) {\n        var searchFrom = pos - this.thousandsSeparator.length + 1;\n        var separatorPos = this.value.indexOf(this.thousandsSeparator, searchFrom);\n        if (separatorPos <= pos) return separatorPos;\n      }\n\n      return -1;\n    }\n  }, {\n    key: \"_adjustRangeWithSeparators\",\n    value: function _adjustRangeWithSeparators(from, to) {\n      var separatorAroundFromPos = this._findSeparatorAround(from);\n\n      if (separatorAroundFromPos >= 0) from = separatorAroundFromPos;\n\n      var separatorAroundToPos = this._findSeparatorAround(to);\n\n      if (separatorAroundToPos >= 0) to = separatorAroundToPos + this.thousandsSeparator.length;\n      return [from, to];\n    }\n    /**\n      @override\n    */\n\n  }, {\n    key: \"remove\",\n    value: function remove() {\n      var fromPos = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n      var toPos = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.value.length;\n\n      var _this$_adjustRangeWit3 = this._adjustRangeWithSeparators(fromPos, toPos);\n\n      var _this$_adjustRangeWit4 = _slicedToArray(_this$_adjustRangeWit3, 2);\n\n      fromPos = _this$_adjustRangeWit4[0];\n      toPos = _this$_adjustRangeWit4[1];\n      var valueBeforePos = this.value.slice(0, fromPos);\n      var valueAfterPos = this.value.slice(toPos);\n\n      var prevBeforeTailSeparatorsCount = this._separatorsCount(valueBeforePos.length);\n\n      this._value = this._insertThousandsSeparators(this._removeThousandsSeparators(valueBeforePos + valueAfterPos));\n\n      var beforeTailSeparatorsCount = this._separatorsCountFromSlice(valueBeforePos);\n\n      return new ChangeDetails({\n        tailShift: (beforeTailSeparatorsCount - prevBeforeTailSeparatorsCount) * this.thousandsSeparator.length\n      });\n    }\n    /**\n      @override\n    */\n\n  }, {\n    key: \"nearestInputPos\",\n    value: function nearestInputPos(cursorPos, direction) {\n      if (!this.thousandsSeparator) return cursorPos;\n\n      switch (direction) {\n        case DIRECTION.NONE:\n        case DIRECTION.LEFT:\n        case DIRECTION.FORCE_LEFT:\n          {\n            var separatorAtLeftPos = this._findSeparatorAround(cursorPos - 1);\n\n            if (separatorAtLeftPos >= 0) {\n              var separatorAtLeftEndPos = separatorAtLeftPos + this.thousandsSeparator.length;\n\n              if (cursorPos < separatorAtLeftEndPos || this.value.length <= separatorAtLeftEndPos || direction === DIRECTION.FORCE_LEFT) {\n                return separatorAtLeftPos;\n              }\n            }\n\n            break;\n          }\n\n        case DIRECTION.RIGHT:\n        case DIRECTION.FORCE_RIGHT:\n          {\n            var separatorAtRightPos = this._findSeparatorAround(cursorPos);\n\n            if (separatorAtRightPos >= 0) {\n              return separatorAtRightPos + this.thousandsSeparator.length;\n            }\n          }\n      }\n\n      return cursorPos;\n    }\n    /**\n      @override\n    */\n\n  }, {\n    key: \"doValidate\",\n    value: function doValidate(flags) {\n      var regexp = flags.input ? this._numberRegExpInput : this._numberRegExp; // validate as string\n\n      var valid = regexp.test(this._removeThousandsSeparators(this.value));\n\n      if (valid) {\n        // validate as number\n        var number = this.number;\n        valid = valid && !isNaN(number) && ( // check min bound for negative values\n        this.min == null || this.min >= 0 || this.min <= this.number) && ( // check max bound for positive values\n        this.max == null || this.max <= 0 || this.number <= this.max);\n      }\n\n      return valid && _get(_getPrototypeOf(MaskedNumber.prototype), \"doValidate\", this).call(this, flags);\n    }\n    /**\n      @override\n    */\n\n  }, {\n    key: \"doCommit\",\n    value: function doCommit() {\n      if (this.value) {\n        var number = this.number;\n        var validnum = number; // check bounds\n\n        if (this.min != null) validnum = Math.max(validnum, this.min);\n        if (this.max != null) validnum = Math.min(validnum, this.max);\n        if (validnum !== number) this.unmaskedValue = String(validnum);\n        var formatted = this.value;\n        if (this.normalizeZeros) formatted = this._normalizeZeros(formatted);\n        if (this.padFractionalZeros && this.scale > 0) formatted = this._padFractionalZeros(formatted);\n        this._value = formatted;\n      }\n\n      _get(_getPrototypeOf(MaskedNumber.prototype), \"doCommit\", this).call(this);\n    }\n    /** */\n\n  }, {\n    key: \"_normalizeZeros\",\n    value: function _normalizeZeros(value) {\n      var parts = this._removeThousandsSeparators(value).split(this.radix); // remove leading zeros\n\n\n      parts[0] = parts[0].replace(/^(\\D*)(0*)(\\d*)/, function (match, sign, zeros, num) {\n        return sign + num;\n      }); // add leading zero\n\n      if (value.length && !/\\d$/.test(parts[0])) parts[0] = parts[0] + '0';\n\n      if (parts.length > 1) {\n        parts[1] = parts[1].replace(/0*$/, ''); // remove trailing zeros\n\n        if (!parts[1].length) parts.length = 1; // remove fractional\n      }\n\n      return this._insertThousandsSeparators(parts.join(this.radix));\n    }\n    /** */\n\n  }, {\n    key: \"_padFractionalZeros\",\n    value: function _padFractionalZeros(value) {\n      if (!value) return value;\n      var parts = value.split(this.radix);\n      if (parts.length < 2) parts.push('');\n      parts[1] = parts[1].padEnd(this.scale, '0');\n      return parts.join(this.radix);\n    }\n    /**\n      @override\n    */\n\n  }, {\n    key: \"unmaskedValue\",\n    get: function get() {\n      return this._removeThousandsSeparators(this._normalizeZeros(this.value)).replace(this.radix, '.');\n    },\n    set: function set(unmaskedValue) {\n      _set(_getPrototypeOf(MaskedNumber.prototype), \"unmaskedValue\", unmaskedValue.replace('.', this.radix), this, true);\n    }\n    /**\n      @override\n    */\n\n  }, {\n    key: \"typedValue\",\n    get: function get() {\n      return Number(this.unmaskedValue);\n    },\n    set: function set(n) {\n      _set(_getPrototypeOf(MaskedNumber.prototype), \"unmaskedValue\", String(n), this, true);\n    }\n    /** Parsed Number */\n\n  }, {\n    key: \"number\",\n    get: function get() {\n      return this.typedValue;\n    },\n    set: function set(number) {\n      this.typedValue = number;\n    }\n    /**\n      Is negative allowed\n      @readonly\n    */\n\n  }, {\n    key: \"allowNegative\",\n    get: function get() {\n      return this.signed || this.min != null && this.min < 0 || this.max != null && this.max < 0;\n    }\n    /**\n      @override\n    */\n\n  }, {\n    key: \"typedValueEquals\",\n    value: function typedValueEquals(value) {\n      // handle  0 -> '' case (typed = 0 even if value = '')\n      // for details see https://github.com/uNmAnNeR/imaskjs/issues/134\n      return (_get(_getPrototypeOf(MaskedNumber.prototype), \"typedValueEquals\", this).call(this, value) || MaskedNumber.EMPTY_VALUES.includes(value) && MaskedNumber.EMPTY_VALUES.includes(this.typedValue)) && !(value === 0 && this.value === '');\n    }\n  }]);\n\n  return MaskedNumber;\n}(Masked);\nMaskedNumber.DEFAULTS = {\n  radix: ',',\n  thousandsSeparator: '',\n  mapToRadix: ['.'],\n  scale: 2,\n  signed: false,\n  normalizeZeros: true,\n  padFractionalZeros: false\n};\nMaskedNumber.EMPTY_VALUES = [].concat(_toConsumableArray(Masked.EMPTY_VALUES), [0]);\nIMask.MaskedNumber = MaskedNumber;\n\nexport { MaskedNumber as default };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}